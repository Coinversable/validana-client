{
  "version": 3,
  "file": "validana-client.js",
  "sources": [
    "ng://validana-client/out/key.ts",
    "ng://validana-client/out/client.ts",
    "ng://validana-client/out/tools/observable.ts",
    "ng://validana-client/out/tools/stringmap.ts",
    "ng://validana-client/out/tools/crypto.ts",
    "ng://validana-client/out/tools/log.ts"
  ],
  "sourcesContent": [
    "/**\r\n * @license\r\n * Copyright Coinversable B.V. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by a AGPLv3-style license that can be\r\n * found in the LICENSE file at https://validana.io/license\r\n */\r\n\r\n// tslint:disable-next-line:no-var-requires\r\nconst Buffer: typeof global.Buffer = require(\"buffer\").Buffer;\r\nimport { ECPair, networks, ECSignature } from \"bitcoinjs-lib\";\r\nimport { Crypto } from \"./tools/crypto\";\r\n\r\n/** A public key. We use and accept compressed keys only. */\r\nexport class PublicKey {\r\n\tprotected readonly key: ECPair;\r\n\tprivate address: string | undefined;\r\n\r\n\t/** Create a new public key from a buffer. Will throw an error if the buffer is not a valid public key. */\r\n\tconstructor(publicKey: Buffer | ECPair) {\r\n\t\tif (publicKey instanceof Buffer) {\r\n\t\t\tthis.key = ECPair.fromPublicKeyBuffer(publicKey, networks.bitcoin);\r\n\t\t} else if (publicKey instanceof ECPair) {\r\n\t\t\tthis.key = publicKey;\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Invalid type for public key\");\r\n\t\t}\r\n\t\tif (!this.key.compressed) {\r\n\t\t\tthrow new Error(\"Only compressed keys are supported.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/** Check if a public key is valid or not. We accept only compressed public keys. */\r\n\tpublic getPublicKey(): Buffer {\r\n\t\treturn this.key.getPublicKeyBuffer();\r\n\t}\r\n\r\n\t/** Check if a public key is valid or not. We accept only compressed public keys. */\r\n\tpublic static isValidPublic(publicKey: Buffer): boolean {\r\n\t\ttry {\r\n\t\t\treturn ECPair.fromPublicKeyBuffer(publicKey, networks.bitcoin).compressed;\r\n\t\t} catch {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/** Check if an address is valid or not. Only prefix 0 is accepted. */\r\n\tpublic static isValidAddress(address: string): boolean {\r\n\t\tif (typeof address !== \"string\") {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tconst decodedAddress = Crypto.base58ToBinary(address);\r\n\t\t\tconst checksum = decodedAddress.slice(-4);\r\n\t\t\treturn decodedAddress[0] === 0x00 && Crypto.hash256(decodedAddress.slice(0, -4)).slice(0, 4).equals(checksum);\r\n\t\t} catch {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/** Get the address of this public key. We use the address of the compressed key with prefix 0. */\r\n\tpublic getAddress(): string {\r\n\t\tif (this.address === undefined) {\r\n\t\t\tthis.address = this.key.getAddress();\r\n\t\t}\r\n\t\treturn this.address;\r\n\t}\r\n\r\n\t/** Verify a message and its signature against a public key. Will throw an error if any of the input values is not valid. */\r\n\tpublic static verify(publicKey: Buffer, hash: Buffer, signature: Buffer): boolean {\r\n\t\treturn ECPair.fromPublicKeyBuffer(publicKey, networks.bitcoin).verify(\r\n\t\t\thash,\r\n\t\t\tECSignature.parseCompact(Buffer.concat([Crypto.uInt8ToBinary(27), signature])).signature\r\n\t\t);\r\n\t}\r\n}\r\n\r\n/**\r\n * A private key.\r\n * Technical info: Only the secp256k1 curve is supported, We use compressed\r\n * wif prefix 0x80 (same as bitcoin) by default, but accept all others.\r\n */\r\nexport class PrivateKey extends PublicKey {\r\n\t//Compressed is only used if public key is not given\r\n\tprivate constructor(privateKey: ECPair) {\r\n\t\tsuper(privateKey);\r\n\t}\r\n\r\n\t/** Generate a new random private key. An error will be thrown if no suitable random source is available. */\r\n\tpublic static generate(): PrivateKey {\r\n\t\treturn new PrivateKey(ECPair.makeRandom({ compressed: true, network: networks.bitcoin }));\r\n\t}\r\n\r\n\t/** Check if a WIF is valid or not. Only compressed wifs with prefix 0x80 are accepted. */\r\n\tpublic static isValidWIF(wif: string): boolean {\r\n\t\ttry {\r\n\t\t\treturn ECPair.fromWIF(wif, networks.bitcoin).compressed;\r\n\t\t} catch (error) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get the wif of this private key.\r\n\t * By default it will use the same format it was imported in.\r\n\t * If it was generated by generate() this will be compressed with network prefix 0x80\r\n\t */\r\n\tpublic toWIF(): string {\r\n\t\treturn this.key.toWIF();\r\n\t}\r\n\r\n\t/** Turn a WIF into a private key. Throws an error if wif is not a valid private key. */\r\n\tpublic static fromWIF(wif: string): PrivateKey {\r\n\t\tconst privateKey = ECPair.fromWIF(wif, networks.bitcoin);\r\n\t\tif (!privateKey.compressed) {\r\n\t\t\tthrow new Error(\"Only compressed keys are supported.\");\r\n\t\t}\r\n\t\treturn new PrivateKey(privateKey);\r\n\t}\r\n\r\n\t/** Sign data with this private key. Returns the signature as 32 bytes r followed by 32 bytes s. */\r\n\tpublic sign(data: Buffer): Buffer {\r\n\t\treturn this.key.sign(Crypto.hash256(data)).toCompact(0, false).slice(1);\r\n\t}\r\n}",
    "/**\r\n * @license\r\n * Copyright Coinversable B.V. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by a AGPLv3-style license that can be\r\n * found in the LICENSE file at https://validana.io/license\r\n */\r\n\r\n// tslint:disable-next-line:no-var-requires\r\nconst Buffer: typeof global.Buffer = require(\"buffer\").Buffer;\r\nimport { Log } from \"./tools/log\";\r\nimport { Crypto } from \"./tools/crypto\";\r\nimport { StringMap } from \"./tools/stringmap\";\r\nimport { VObserver } from \"./tools/observer\";\r\nimport { VObservable } from \"./tools/observable\";\r\nimport { PrivateKey } from \"./key\";\r\nimport { RequestMessage, ResponseOrPushMessage, ProcessRequest, Contract, TxResponseOrPush, TxRequest } from \"./api\";\r\n\r\n/**\r\n * Are we connected or not?\r\n * In case of NoDisconnected: reregister for push updates.\r\n * In case of NoCrashed: reregister for push updates. Also any outstanding requests were canceled. (called back with an error)\r\n * In case of NoNotSupported: it will not connect again. Also any outstanding requests were canceled. (called back with an error)\r\n */\r\nexport enum Connected { Yes, NoJustStarted, NoDisconnected, NoCrashed, NoNotSupported }\r\n\r\nexport interface PushMessage {\r\n\ttype: string;\r\n\tdata: any;\r\n}\r\n\r\n/**\r\n * The Client is used to interact with the Server.\r\n * Observe the Client to keep updated about the connection status and incomming push messages.\r\n */\r\nexport class Client extends VObservable<Connected | PushMessage> {\r\n\t//Singleton instance\r\n\tprotected static instance: Client | undefined = undefined;\r\n\r\n\t//Settings\r\n\tprotected serviceURL: string | undefined;\r\n\tprotected processURL: string | undefined;\r\n\tprotected signPrefix: Buffer | undefined;\r\n\tprotected signMethod: string = \"hash256-ecdsa-compact\";\r\n\tprotected reconnectTimeout: number = 5000;\r\n\tprotected maxReconnectTimeout: number = 60000;\r\n\tprotected isInitialized: boolean = false;\r\n\r\n\t//Websocket information\r\n\tprotected webSocket: WebSocket | undefined;\r\n\tprotected connected: Connected = Connected.NoJustStarted;\r\n\tprotected timeout: number = 5000;\r\n\tprotected requestResponseMap = new StringMap<{ type: string, data?: {}, resolve: (data: any) => void, reject: (error: Error) => void }>();\r\n\r\n\tprotected constructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/** Get this instance. */\r\n\tpublic static get(): Client {\r\n\t\tif (this.instance === undefined) {\r\n\t\t\tthis.instance = new Client();\r\n\t\t}\r\n\t\treturn this.instance;\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize this instance. Once it is initialized it will connect to the server.\r\n\t * @param signPrefix The prefix used for signing transactions\r\n\t * @param serviceURL The url of the server for reading.\r\n\t * @param processURL The url of the server for new transactions.\r\n\t * @param signMethod The method used for signing transactions\r\n\t * @param reconnectTimeout The timeout before trying to reconnect should it disconnect.\r\n\t * Note that it is a bit randomized to prevent all client from connecting at the same time after a crash.\r\n\t * @param maxReconnectTimeout It will slowly increase timeout if connecting fails, this is the maximum it is allowed to reach.\r\n\t */\r\n\tpublic init(signPrefix: string, serviceURL: string, processURL: string = serviceURL, signMethod: string = \"hash256-ecdsa-compact\",\r\n\t\treconnectTimeout: number = 5000, maxReconnectTimeout: number = 60000): void {\r\n\r\n\t\tif (!this.isInitialized) {\r\n\t\t\tthis.isInitialized = true;\r\n\t\t\tthis.serviceURL = serviceURL;\r\n\t\t\tthis.processURL = processURL;\r\n\t\t\tif (!this.serviceURL.endsWith(\"/\")) {\r\n\t\t\t\tthis.serviceURL += \"/\";\r\n\t\t\t}\r\n\t\t\tif (!this.processURL.endsWith(\"/\")) {\r\n\t\t\t\tthis.processURL += \"/\";\r\n\t\t\t}\r\n\t\t\tif (this.processURL !== this.serviceURL && this.processURL!.slice(0, 4) !== \"http\") {\r\n\t\t\t\tthrow new Error(\"processURL should be the same as serviceURL or a http(s) url\");\r\n\t\t\t}\r\n\t\t\tthis.signPrefix = Crypto.utf8ToBinary(signPrefix);\r\n\t\t\tthis.signMethod = signMethod;\r\n\t\t\tthis.reconnectTimeout = reconnectTimeout;\r\n\t\t\tthis.maxReconnectTimeout = maxReconnectTimeout;\r\n\t\t\tthis.createWebsocket();\r\n\t\t}\r\n\t}\r\n\r\n\t/** Get whether there currently is a connection to the backend. 0 = yes, 1+ = no for various reasons. */\r\n\tpublic isConnected(): Connected {\r\n\t\treturn this.connected;\r\n\t}\r\n\r\n\t/** Helper to sign data with a private key for contract. */\r\n\tprotected sign(toSign: Buffer, privateKey: PrivateKey, method?: string): Buffer {\r\n\t\tlet result: Buffer;\r\n\t\t//Currently we only support one signing method.\r\n\t\tswitch (method) {\r\n\t\t\tcase \"hash256-ecdsa-compact\":\r\n\t\t\tdefault:\r\n\t\t\t\tresult = privateKey.sign(toSign);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/** Combines the query(\"contracts\"), signAndSend() and getProcessedTx() methods. */\r\n\tpublic async processTx(privateKey: PrivateKey, contractName: string, payload: object, validTill: number = 0): Promise<TxResponseOrPush> {\r\n\t\t//Will throw an error if it failed to retrieve the contracts. (Which we don't catch but directly forward.)\r\n\t\tconst contracts = await this.query(\"contracts\", undefined, true);\r\n\r\n\t\t//We managed to get the contracts\r\n\t\tfor (const contract of contracts) {\r\n\t\t\tif (contract.type === contractName) {\r\n\t\t\t\tif (Object.keys(contract.template).length !== Object.keys(payload).length) {\r\n\t\t\t\t\tthrow new Error(\"Payload not valid for contract.\");\r\n\t\t\t\t}\r\n\t\t\t\tfor (const key of Object.keys(contract.template)) {\r\n\t\t\t\t\tif ((payload as any)[key] === undefined) {\r\n\t\t\t\t\t\tthrow new Error(\"Payload not valid for contract.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tconst id = Crypto.id();\r\n\t\t\t\ttry {\r\n\t\t\t\t\tawait this.signAndSend(privateKey, id, Crypto.hexToBinary(contract.hash), payload, validTill);\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\treturn await this.getProcessedTx(id);\r\n\t\t\t\t\t} catch (error2) {\r\n\t\t\t\t\t\tthrow new Error(`Transaction delivered, but unable to determine status: ${error2.message}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tthrow new Error(`Failed to deliver transaction: ${error.message}`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow new Error(\"Contract does not exist (anymore).\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sign a transaction and send it to be processed.\r\n\t * @param privateKey The private key used for signing\r\n\t * @param transactionId Id of the transaction (use Crypto.id() to generate a random one)\r\n\t * @param contractHash Hash of the contract\r\n\t * @param payload A payload json\r\n\t * @param validTill Till when the transaction is valid (milliseconds since unix epoch), 0 = always\r\n\t * Once a block with a processed time greater than this is created it is no longer valid, but as creating\r\n\t * a block takes some time the block it is in may be processed just after the validTill.\r\n\t */\r\n\tpublic async signAndSend(privateKey: PrivateKey, transactionId: Buffer, contractHash: Buffer, payload: object, validTill: number = 0): Promise<void> {\r\n\t\tif (!this.isInitialized) {\r\n\t\t\tthrow new Error(\"Coinversable is not initialized.\");\r\n\t\t}\r\n\r\n\t\tconst binaryTx = Buffer.concat([\r\n\t\t\tCrypto.uInt8ToBinary(1), //version\r\n\t\t\ttransactionId,\r\n\t\t\tcontractHash,\r\n\t\t\tCrypto.uLongToBinary(validTill),\r\n\t\t\tCrypto.utf8ToBinary(JSON.stringify(payload))\r\n\t\t]);\r\n\t\tconst publicKey = privateKey.getPublicKey();\r\n\t\tconst signature = this.sign(Buffer.concat([this.signPrefix!, binaryTx]), privateKey, this.signMethod);\r\n\r\n\t\t//Create the format request\r\n\t\tconst request: ProcessRequest = {\r\n\t\t\tbase64tx: Crypto.binaryToBase64(Buffer.concat([\r\n\t\t\t\tCrypto.uInt32ToBinary(binaryTx.length + publicKey.length + signature.length),\r\n\t\t\t\tbinaryTx,\r\n\t\t\t\tsignature,\r\n\t\t\t\tpublicKey\r\n\t\t\t])),\r\n\t\t\tcreateTs: Date.now()\r\n\t\t};\r\n\t\treturn this.query(\"process\", request, true);\r\n\t}\r\n\r\n\t/** Get a transaction once it has been processed (which may take a while). */\r\n\tpublic async getProcessedTx(transactionId: Buffer): Promise<TxResponseOrPush> {\r\n\t\treturn new Promise<TxResponseOrPush>((resolve, reject) => new Helper(transactionId, resolve, reject));\r\n\t}\r\n\r\n\t/**\r\n\t * Send query to remote service.\r\n\t * @param type The action that you want to perform.\r\n\t * @param data The data to send to the server in this request\r\n\t * @param quickFail Whether to fail if there is no connection or to try again later\r\n\t */\r\n\tpublic async query(type: string, data?: any, quickFail?: boolean): Promise<void>;\r\n\tpublic async query(type: \"contracts\", data?: undefined, quickFail?: boolean): Promise<Contract[]>;\r\n\tpublic async query(type: \"transaction\", data: TxRequest, quickFail?: boolean): Promise<TxResponseOrPush | undefined>;\r\n\tpublic async query(type: \"txStatus\", data: TxRequest, quickFail?: boolean): Promise<string | undefined>;\r\n\tpublic async query(type: \"time\", data?: undefined, quickFail?: boolean): Promise<number>;\r\n\tpublic async query(type: \"process\", data: ProcessRequest, quickFail?: boolean): Promise<void>;\r\n\tpublic async query(type: string, data?: any, quickFail: boolean = false): Promise<any> {\r\n\t\t//If we only post a transaction we won't setup a websocket connection, but just send it.\r\n\t\tif (type === \"process\" && (this.processURL !== this.serviceURL || !this.isInitialized)) {\r\n\t\t\tif (!this.isInitialized) {\r\n\t\t\t\tthrow new Error(\"Coinversable not initialized\");\r\n\t\t\t} else {\r\n\t\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t\tconst restRequest = new XMLHttpRequest();\r\n\t\t\t\t\trestRequest.onreadystatechange = () => {\r\n\t\t\t\t\t\tif (restRequest.readyState === 4) {\r\n\t\t\t\t\t\t\tif (restRequest.status === 200) {\r\n\t\t\t\t\t\t\t\tresolve(restRequest.responseText);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treject(restRequest.responseText !== \"\" ? restRequest.responseText : \"Failed to connect.\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\trestRequest.open(\"POST\", this.processURL! + \"process\", true);\r\n\t\t\t\t\trestRequest.send(JSON.stringify(data));\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst id: string = Crypto.binaryToHex(Crypto.id());\r\n\t\tconst request: RequestMessage = {\r\n\t\t\ttype,\r\n\t\t\tid\r\n\t\t};\r\n\r\n\t\t//If we have data to send along with our request\r\n\t\tif (data !== undefined) {\r\n\t\t\trequest.data = data;\r\n\t\t}\r\n\r\n\t\t//If it currently is not connected.\r\n\t\tif (this.webSocket === undefined || this.webSocket.readyState !== WebSocket.OPEN) {\r\n\t\t\tif (this.connected !== Connected.NoCrashed && this.connected !== Connected.NoNotSupported) {\r\n\t\t\t\tif (quickFail) {\r\n\t\t\t\t\tthrow new Error(\"No connection\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//Mark it to be resend once it connects again\r\n\t\t\t\t\treturn new Promise((resolve, reject) => this.requestResponseMap.set(id, { type, data, resolve, reject }));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t//If there was a crash do not try again, could be our request was responsible for that.\r\n\t\t\t\tthrow new Error(\"Connection to backend crashed.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst requestString = JSON.stringify(request);\r\n\t\tLog.debug(`Request: ${requestString}`);\r\n\t\tthis.webSocket.send(requestString);\r\n\r\n\t\t//Await response\r\n\t\treturn new Promise((resolve, reject) => this.requestResponseMap.set(id, { type, data, resolve, reject }));\r\n\t}\r\n\r\n\t/** Create a new websocket after initializing or losing connection. */\r\n\tprotected createWebsocket(): void {\r\n\t\t//Create a websocket\r\n\t\tthis.webSocket = new WebSocket(this.serviceURL!);\r\n\r\n\t\t//When it opens.\r\n\t\tthis.webSocket.onopen = () => {\r\n\t\t\t//Mark as connected again before resending outstanding requests\r\n\t\t\tthis.connected = Connected.Yes;\r\n\r\n\t\t\t//Resend outstanding requests (in case of a crash they are removed already)\r\n\t\t\tfor (const key of this.requestResponseMap.keys()) {\r\n\t\t\t\tconst requestMap = this.requestResponseMap.get(key);\r\n\t\t\t\t//Resend the message\r\n\t\t\t\tthis.query(requestMap.type, requestMap.data).then(requestMap.resolve).catch(requestMap.reject);\r\n\t\t\t\t//No need to keep multiple, the newly created request will be saved again\r\n\t\t\t\tthis.requestResponseMap.delete(key);\r\n\t\t\t}\r\n\r\n\t\t\t//notify observers of new status\r\n\t\t\tthis.setChanged();\r\n\t\t\tthis.notifyObservers(Connected.Yes);\r\n\t\t\t//Successfully connected, so reset timeout. Random timeout, so we don't all reconnect at the same time.\r\n\t\t\tthis.timeout = this.reconnectTimeout * (0.5 + Math.random());\r\n\t\t};\r\n\r\n\t\t//this.webSocket.onerror = (error) => {\r\n\t\t//onclose will be called as well in the event of an error, so we let that deal with reconnecting\r\n\t\t//};\r\n\r\n\t\t//When a message is received.\r\n\t\tthis.webSocket.onmessage = (message) => {\r\n\t\t\tlet response: ResponseOrPushMessage;\r\n\t\t\ttry {\r\n\t\t\t\tresponse = JSON.parse(message.data);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tLog.warn(`Message data: ${message.data}`);\r\n\t\t\t\tLog.error(\"Received message is not valid json.\", error);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (response.id !== undefined) {\r\n\t\t\t\tLog.debug(`Response: ${message.data}`);\r\n\t\t\t\tconst responseMap = this.requestResponseMap.get(response.id);\r\n\t\t\t\tif (responseMap !== undefined) {\r\n\t\t\t\t\tif (response.error !== undefined) {\r\n\t\t\t\t\t\tresponseMap.reject(new Error(response.error));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresponseMap.resolve(response.data);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//Remove it from the list of outstanding requests\r\n\t\t\t\t\tthis.requestResponseMap.delete(response.id);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tLog.warn(`Received response to unknown request: ${message.data}`);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tLog.debug(`Push: ${message.data}`);\r\n\t\t\t\tif (response.error === undefined && typeof response.pushType === \"string\") {\r\n\t\t\t\t\tthis.setChanged();\r\n\t\t\t\t\tthis.notifyObservers({\r\n\t\t\t\t\t\ttype: response.pushType,\r\n\t\t\t\t\t\tdata: response.data\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tLog.warn(`Received invalid push message: ${message.data}`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//When the websocket closes\r\n\t\tthis.webSocket.onclose = (ev) => {\r\n\t\t\tif (ev.code === 1001) {\r\n\t\t\t\tLog.info(\"Server going offline, reconnecting in a moment...\");\r\n\t\t\t\tthis.connected = Connected.NoDisconnected;\r\n\t\t\t\tthis.setChanged();\r\n\t\t\t} else if (ev.code === 4100) {\r\n\t\t\t\t//Any outstanding requests will be canceled\r\n\t\t\t\tfor (const requestKey of this.requestResponseMap.keys()) {\r\n\t\t\t\t\tthis.requestResponseMap.get(requestKey).reject(new Error(\"Version of api not supported.\"));\r\n\t\t\t\t\tthis.requestResponseMap.delete(requestKey);\r\n\t\t\t\t}\r\n\t\t\t\t//Version of the api not supported\r\n\t\t\t\tthis.connected = Connected.NoNotSupported;\r\n\t\t\t\tthis.setChanged();\r\n\t\t\t} else {\r\n\t\t\t\tif (this.connected === Connected.Yes) {\r\n\t\t\t\t\t//Log and delete outstanding requests\r\n\t\t\t\t\tfor (const requestKey of this.requestResponseMap.keys()) {\r\n\t\t\t\t\t\tconst data = this.requestResponseMap.get(requestKey).data;\r\n\t\t\t\t\t\tLog.warn(`Outstanding requests: ${requestKey}: type: ${this.requestResponseMap.get(requestKey).type} ` +\r\n\t\t\t\t\t\t\t`data: ${data !== undefined ? JSON.stringify(data) : undefined}`);\r\n\t\t\t\t\t\tthis.requestResponseMap.get(requestKey).reject(new Error(\"Connection to backend crashed.\"));\r\n\t\t\t\t\t\tthis.requestResponseMap.delete(requestKey);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tLog.error(\"Error in websocket connection, reconnecting in a moment...\");\r\n\t\t\t\t\tthis.connected = Connected.NoCrashed;\r\n\t\t\t\t\tthis.setChanged();\r\n\t\t\t\t} else if (this.connected === Connected.NoJustStarted) {\r\n\t\t\t\t\tLog.info(\"Failed to connect, trying again in a moment...\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tLog.info(\"Failed to reconnect, trying again in a moment...\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.notifyObservers(this.connected);\r\n\t\t\t//Unless the version of the api is no longer supported try to connect again.\r\n\t\t\tif (this.connected !== Connected.NoNotSupported) {\r\n\t\t\t\tsetTimeout(() => this.createWebsocket(), Math.min(this.timeout, this.maxReconnectTimeout));\r\n\t\t\t\tthis.timeout *= 1.5; //Increase timeout so we don't retry to often.\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/** Helper class to wait till a transaction has been processed before calling the callback. */\r\nclass Helper implements VObserver<Connected | PushMessage> {\r\n\tprivate readonly id: string;\r\n\tprivate readonly resolve: (tx: TxResponseOrPush) => void;\r\n\tprivate readonly reject: (error: Error) => void;\r\n\r\n\tconstructor(id: Buffer, resolve: (tx: TxResponseOrPush) => void, reject: (error: Error) => void) {\r\n\t\tthis.id = Crypto.binaryToHex(id);\r\n\t\tthis.resolve = resolve;\r\n\t\tthis.reject = reject;\r\n\t\tClient.get().addObserver(this);\r\n\t\tClient.get().query(\"transaction\", { txId: this.id, push: true }, true).then((data) => {\r\n\t\t\t//No known status, wait for push transaction instead\r\n\t\t\tif (data !== undefined) {\r\n\t\t\t\tClient.get().deleteObserver(this);\r\n\t\t\t\tthis.resolve(data);\r\n\t\t\t}\r\n\t\t}).catch((error) => {\r\n\t\t\tthis.reject(error);\r\n\t\t});\r\n\t}\r\n\r\n\tpublic update(_: Client, arg?: Connected | PushMessage): void {\r\n\t\tif (typeof arg === \"object\" && arg.type === \"transaction\" && (arg.data as TxResponseOrPush).id === this.id) {\r\n\t\t\tClient.get().deleteObserver(this);\r\n\t\t\tthis.resolve(arg.data as TxResponseOrPush);\r\n\t\t} else if (arg === Connected.Yes) {\r\n\t\t\t//Reregister for push updates\r\n\t\t\tClient.get().query(\"transaction\", { txId: this.id, push: true }, true).then((data) => {\r\n\t\t\t\t//No known status, wait for push transaction instead\r\n\t\t\t\tif (data !== undefined) {\r\n\t\t\t\t\tClient.get().deleteObserver(this);\r\n\t\t\t\t\tthis.resolve(data);\r\n\t\t\t\t}\r\n\t\t\t}).catch((error) => {\r\n\t\t\t\tthis.reject(error);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}",
    "/**\r\n * @license\r\n * Copyright Coinversable B.V. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by a AGPLv3-style license that can be\r\n * found in the LICENSE file at https://validana.io/license\r\n */\r\n\r\nimport { VObserver } from \"./observer\";\r\n\r\n/**\r\n * Classical Observable class\r\n * Generics are used to make it clear what data can be forwarded to observers.\r\n */\r\nexport class VObservable<T> {\r\n\r\n\t// The observers this observable should notify\r\n\tprivate observers: Array<VObserver<T>> = new Array<VObserver<T>>();\r\n\r\n\t// If this object has changed\r\n\tprivate changed: boolean = false;\r\n\r\n\t/**\r\n\t * Add observer to the list of observers\r\n\t * @param o The observer to add\r\n\t */\r\n\tpublic addObserver(o: VObserver<T>): void {\r\n\t\tif (this.observers.indexOf(o) === -1) {\r\n\t\t\tthis.observers.push(o);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Check if this has a certain observer.\r\n\t * @param o the observer to check\r\n\t */\r\n\tpublic hasObserver(o: VObserver<T>): boolean {\r\n\t\treturn this.observers.indexOf(o) !== -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates that the object is no longer changed\r\n\t */\r\n\tprotected clearChanged(): void {\r\n\t\tthis.changed = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Return the number of active observers\r\n\t */\r\n\tpublic countObservers(): number {\r\n\t\treturn this.observers.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Delete given observer\r\n\t * @param o The observer to delete\r\n\t */\r\n\tpublic deleteObserver(o: VObserver<T>): void {\r\n\t\tconst index = this.observers.indexOf(o);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * See if this element has changed\r\n\t */\r\n\tpublic hasChanged(): boolean {\r\n\t\treturn this.changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Notify all listening observers when something has changed\r\n\t * @param arg (optional) additional argument to pass on\r\n\t */\r\n\tpublic notifyObservers(arg?: T): void {\r\n\r\n\t\t// Make sure there are changes to notify\r\n\t\tif (this.hasChanged()) {\r\n\r\n\t\t\t// Call all observers\r\n\t\t\tfor (const observer of this.observers) {\r\n\t\t\t\tobserver.update(this, arg);\r\n\t\t\t}\r\n\r\n\t\t\t// Clear changed\r\n\t\t\tthis.clearChanged();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Object contents have changed\r\n\t * It is now possible to notify observers\r\n\t */\r\n\tprotected setChanged(): void {\r\n\t\tthis.changed = true;\r\n\t}\r\n}",
    "/**\r\n * @license\r\n * Copyright Coinversable B.V. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by a AGPLv3-style license that can be\r\n * found in the LICENSE file at https://validana.io/license\r\n */\r\n\r\n/**\r\n * This class saves key-value pairs.\r\n * Similar to the ES6 Map, but compatile with older browsers.\r\n */\r\nexport class StringMap<T> {\r\n\tprivate map: { [key: string]: T } = {};\r\n\r\n\t/**\r\n\t * Add all elements from an object, overwriting current values if @param overwrite is true (default).\r\n\t * @param object The array of key-value pairs to add from.\r\n\t * @param overwrite Should intersecting elements be overwritten or not.\r\n\t */\r\n\tpublic setFromObject(this: StringMap<T>, object: Readonly<{ [key: string]: T }>, overwrite: boolean = true): StringMap<T> {\r\n\t\tfor (const key of Object.keys(object)) {\r\n\t\t\tif (overwrite || !this.has(key)) {\r\n\t\t\t\tthis.map[key] = object[key];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Add all elements from another map, overwriting current values if @param overwrite is true (default).\r\n\t * @param map The map to add from.\r\n\t * @param overwrite Should intersecting elements be overwritten or not.\r\n\t */\r\n\tpublic setFromMap(this: StringMap<T>, map: Readonly<StringMap<T>>, overwrite: boolean = true): StringMap<T> {\r\n\t\tfor (const key of map.keys()) {\r\n\t\t\tif (overwrite || !this.has(key)) {\r\n\t\t\t\tthis.map[key] = map.get(key);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the value associated with a certain key (or undefined if it does not exist).\r\n\t * @param key the key\r\n\t */\r\n\tpublic get(key: string): T { //https://github.com/Microsoft/TypeScript/issues/9619 Add undefined if there is a solution\r\n\t\treturn this.map[key];\r\n\t}\r\n\r\n\t/**\r\n\t * Set the value associated with a certain key.\r\n\t * @param key the key\r\n\t * @param value the value\r\n\t */\r\n\tpublic set(this: StringMap<T>, key: string, value: T): StringMap<T> {\r\n\t\tthis.map[key] = value;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if the Map contains a certain key-value pair.\r\n\t * @param key the key of the key-value pair\r\n\t */\r\n\tpublic has(key: string): boolean {\r\n\t\treturn this.map.hasOwnProperty(key);\r\n\t}\r\n\r\n\t/**\r\n\t * Delete a key-value pair.\r\n\t * @param key the key\r\n\t */\r\n\tpublic delete(this: StringMap<T>, key: string): StringMap<T> {\r\n\t\tdelete this.map[key];\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Get a list of all keys in this Map. */\r\n\tpublic keys(): string[] {\r\n\t\treturn Object.keys(this.map);\r\n\t}\r\n\r\n\t/** Get a list of all values in this Map. */\r\n\tpublic values(): T[] {\r\n\t\tconst result: T[] = [];\r\n\t\tfor (const key of Object.keys(this.map)) {\r\n\t\t\tresult.push(this.map[key]);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/** Get the total amount of key-value pairs in this Map. */\r\n\tpublic size(): number {\r\n\t\treturn Object.keys(this.map).length;\r\n\t}\r\n\r\n\t/** Remove all values from this Map. */\r\n\tpublic clear(this: StringMap<T>): StringMap<T> {\r\n\t\tfor (const key of Object.keys(this.map)) {\r\n\t\t\tdelete this.map[key];\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** Get a list of all key-value pairs in this Map. */\r\n\tpublic entries(): { [key: string]: T } {\r\n\t\treturn { ...this.map };\r\n\t}\r\n}",
    "/**\r\n * @license\r\n * Copyright Coinversable B.V. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by a AGPLv3-style license that can be\r\n * found in the LICENSE file at https://validana.io/license\r\n */\r\n\r\n// tslint:disable:no-var-requires\r\nconst md5Func = require(\"md5\");\r\nconst randomBytes = require(\"randombytes\");\r\nconst Buffer: typeof global.Buffer = require(\"buffer\").Buffer;\r\nimport { crypto as btccrypt } from \"bitcoinjs-lib\";\r\n\r\n/** Functions for hashing, and encoding binary data into other formats and back again. */\r\nexport class Crypto {\r\n\t//All base 58 characters in the order they are encoded in.\r\n\tprivate static readonly base58chars = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\r\n\t//And a map of characters to position in that string.\r\n\tprivate static readonly base58map: { [key: string]: number } = Object.keys(Crypto.base58chars).reduce(\r\n\t\t// @dynamic Make the angular compiler stop complaining\r\n\t\t(obj: any, key) => (obj[Crypto.base58chars[parseInt(key, 10)]] = parseInt(key, 10), obj), {});\r\n\r\n\t/** Calculate hash160 (ripemd160 of sha256) */\r\n\tpublic static hash160(buffer: Buffer): Buffer {\r\n\t\treturn btccrypt.hash160(buffer);\r\n\t}\r\n\r\n\t/** Calculate hash256 (double sha256) */\r\n\tpublic static hash256(buffer: Buffer): Buffer {\r\n\t\treturn btccrypt.hash256(buffer);\r\n\t}\r\n\r\n\t/** Calculate ripemd160 */\r\n\tpublic static ripemd160(buffer: Buffer): Buffer {\r\n\t\treturn btccrypt.ripemd160(buffer);\r\n\t}\r\n\r\n\t/** Calculate sha1 (Note that sha1 is unsafe nowadays!)  */\r\n\tpublic static sha1(buffer: Buffer): Buffer {\r\n\t\treturn btccrypt.sha1(buffer);\r\n\t}\r\n\r\n\t/** Calculate sha256 (Note that sha256 is vulnerable to length extension attacks, use hash256 instead.) */\r\n\tpublic static sha256(buffer: Buffer): Buffer {\r\n\t\treturn btccrypt.sha256(buffer);\r\n\t}\r\n\r\n\t/** Calculate md5 (Note that md5 is unsafe nowadays!)  */\r\n\tpublic static md5(buffer: Buffer): Buffer {\r\n\t\treturn Buffer.from(md5Func(buffer), \"hex\");\r\n\t}\r\n\r\n\t/**\r\n\t * Check if a string is valid hex code.\r\n\t * @param text The text to test.\r\n\t */\r\n\tpublic static isHex(text: string): boolean {\r\n\t\treturn text.search(/^[0-9A-Fa-f]*$/) === 0 && (text.length & 0x1) === 0;\r\n\t}\r\n\r\n\t/** Turn a hex encoded string into binary data. */\r\n\tpublic static hexToBinary(hex: string): Buffer {\r\n\t\treturn Buffer.from(hex, \"hex\");\r\n\t}\r\n\r\n\t/** Turn binary data into a hex encoded string. */\r\n\tpublic static binaryToHex(binary: Buffer): string {\r\n\t\treturn binary.toString(\"hex\");\r\n\t}\r\n\r\n\t/**\r\n\t * Check if a string is valid base58 code.\r\n\t * @param text The text to test.\r\n\t */\r\n\tpublic static isBase58(text: string): boolean {\r\n\t\treturn text.search(/^[1-9A-HJ-NP-Za-km-z]*$/) === 0;\r\n\t}\r\n\r\n\t/** Turn a base58 encoded string into binary data. */\r\n\tpublic static base58ToBinary(base58: string): Buffer {\r\n\t\tif (base58.length === 0) {\r\n\t\t\treturn Buffer.alloc(0);\r\n\t\t}\r\n\t\tconst bytes = [0];\r\n\t\tfor (const char of base58) {\r\n\t\t\tlet value = Crypto.base58map[char];\r\n\t\t\tif (value === undefined) {\r\n\t\t\t\tthrow new Error(\"Invalid character.\");\r\n\t\t\t}\r\n\r\n\t\t\tfor (let j = 0; j < bytes.length; j++) {\r\n\t\t\t\tvalue += bytes[j] * 58;\r\n\t\t\t\tbytes[j] = value & 0xff;\r\n\t\t\t\tvalue >>= 8;\r\n\t\t\t}\r\n\r\n\t\t\twhile (value > 0) {\r\n\t\t\t\tbytes.push(value & 0xff);\r\n\t\t\t\tvalue >>= 8;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// deal with leading zeros\r\n\t\tfor (let k = 0; base58[k] === Crypto.base58chars[0] && k < base58.length - 1; k++) {\r\n\t\t\tbytes.push(0);\r\n\t\t}\r\n\r\n\t\treturn Buffer.from(bytes.reverse());\r\n\t}\r\n\r\n\t/** Turn binary data into a base58 encoded string. */\r\n\tpublic static binaryToBase58(binary: Buffer): string {\r\n\t\tif (binary.length === 0) {\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t\tlet result = \"\";\r\n\t\tconst digits = [0];\r\n\t\t// tslint:disable-next-line:prefer-for-of Old versions don't work well with buffer it seems.\r\n\t\tfor (let j = 0; j < binary.length; j++) {\r\n\t\t\tlet byte = binary[j];\r\n\t\t\tfor (let i = 0; i < digits.length; i++) {\r\n\t\t\t\tbyte += digits[i] << 8;\r\n\t\t\t\tdigits[i] = byte % 58;\r\n\t\t\t\tbyte = (byte / 58) | 0;\r\n\t\t\t}\r\n\r\n\t\t\twhile (byte > 0) {\r\n\t\t\t\tdigits.push(byte % 58);\r\n\t\t\t\tbyte = (byte / 58) | 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Deal with leading zeros\r\n\t\tfor (let i = 0; binary[i] === 0 && i < binary.length - 1; i++) {\r\n\t\t\tresult += Crypto.base58chars[0];\r\n\t\t}\r\n\t\t//Turn digits into characters\r\n\t\tfor (let i = digits.length - 1; i >= 0; i--) {\r\n\t\t\tresult += Crypto.base58chars[digits[i]];\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if a string is valid base64 code.\r\n\t * @param text The text to test.\r\n\t */\r\n\tpublic static isBase64(text: string): boolean {\r\n\t\treturn text.search(/^[\\+\\/-9A-Za-z]*={0,2}$/) === 0 && (text.length & 0x3) === 0;\r\n\t}\r\n\r\n\t/** Turn a base64 encoded string into binary data. */\r\n\tpublic static base64ToBinary(base64: string): Buffer {\r\n\t\treturn Buffer.from(base64, \"base64\");\r\n\t}\r\n\r\n\t/** Turn binary data into a base64 encoded string. */\r\n\tpublic static binaryToBase64(binary: Buffer): string {\r\n\t\treturn binary.toString(\"base64\");\r\n\t}\r\n\r\n\t/**\r\n\t * Check if a string is valid utf8 as far as postgres is concerned.\r\n\t * @param text The text to test.\r\n\t */\r\n\tpublic static isUtf8Postgres(text: string): boolean {\r\n\t\treturn text.indexOf(\"\\0\") === -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Turn a text into for postgres valid utf8 text by removing invalid characters.\r\n\t * @param text The text to transform.\r\n\t */\r\n\tpublic static makeUtf8Postgres(text: string): string {\r\n\t\treturn text.replace(\"\\0\", \"\");\r\n\t}\r\n\r\n\t/** Turn an utf8 string into binary data. */\r\n\tpublic static utf8ToBinary(text: string): Buffer {\r\n\t\treturn Buffer.from(text, \"utf8\");\r\n\t}\r\n\r\n\t/** Turn binary data into an utf8 string. */\r\n\tpublic static binaryToUtf8(binary: Buffer): string {\r\n\t\treturn binary.toString(\"utf8\");\r\n\t}\r\n\r\n\t/**  Turn a javascript number into binary data (Only valid for numbers 0-255, will throw an error otherwise). */\r\n\tpublic static uInt8ToBinary(unsignedInt: number): Buffer {\r\n\t\tconst buffer = Buffer.alloc(1);\r\n\t\tbuffer.writeUInt8(unsignedInt, 0);\r\n\t\treturn buffer;\r\n\t}\r\n\r\n\t/** Turn 1 byte of binary data into a javascript number. Will throw an error if it cannot be converted. */\r\n\tpublic static binaryToUInt8(buffer: Buffer): number {\r\n\t\treturn buffer.readUInt8(0);\r\n\t}\r\n\r\n\t/** Turn a javascript number into binary data (Only valid for numbers 0-(2^16-1), will throw an error otherwise). */\r\n\tpublic static uInt16ToBinary(unsignedInt: number): Buffer {\r\n\t\tconst buffer = Buffer.alloc(2);\r\n\t\tbuffer.writeUInt16LE(unsignedInt, 0);\r\n\t\treturn buffer;\r\n\t}\r\n\r\n\t/** Turn 2 bytes of binary data into a javascript number. Will throw an error if it cannot be converted. */\r\n\tpublic static binaryToUInt16(buffer: Buffer): number {\r\n\t\treturn buffer.readUInt16LE(0);\r\n\t}\r\n\r\n\t/** Turn a javascript number into binary data (Only valid for numbers 0-(2^32-1), will throw an error otherwise). */\r\n\tpublic static uInt32ToBinary(unsignedInt: number): Buffer {\r\n\t\tconst buffer = Buffer.alloc(4);\r\n\t\tbuffer.writeUInt32LE(unsignedInt, 0);\r\n\t\treturn buffer;\r\n\t}\r\n\r\n\t/** Turn 4 bytes of binary data into a javascript number. Will throw an error if it cannot be converted. */\r\n\tpublic static binaryToUInt32(buffer: Buffer): number {\r\n\t\treturn buffer.readUInt32LE(0);\r\n\t}\r\n\r\n\t/** Turn a javascript number into binary data (Only valid for numbers 0-(2^53-1), will throw an error otherwise). */\r\n\tpublic static uLongToBinary(ulong: number): Buffer {\r\n\t\t//A normal long is 64 bits, not 53, but javascript only allows 53 bits accuracy.\r\n\t\tif (!Number.isSafeInteger(ulong) || ulong < 0) {\r\n\t\t\tthrow new Error(\"Invalid number.\");\r\n\t\t}\r\n\t\tconst buffer = Buffer.allocUnsafe(8);\r\n\t\tbuffer.writeUInt32LE(ulong % 4294967296, 0);\r\n\t\tbuffer.writeUInt32LE(ulong / 4294967296, 4);\r\n\t\treturn buffer;\r\n\t}\r\n\r\n\t/** Turn binary data into a javascript number. Will throw an error if it cannot be converted. */\r\n\tpublic static binaryToULong(binary: Buffer): number {\r\n\t\tconst result = binary.readUInt32LE(0) + binary.readUInt32LE(4) * 4294967296;\r\n\t\tif (!Number.isSafeInteger(result)) {\r\n\t\t\tthrow new Error(\"Invalid binary data.\");\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/** Generate a random 16 bytes of data. */\r\n\tpublic static id(): Buffer {\r\n\t\ttry {\r\n\t\t\t//It will throw an error if no good random source can be found.\r\n\t\t\treturn randomBytes(16);\r\n\t\t} catch {\r\n\t\t\t//Use a less random source, which is good enough as security doesn't depend on it.\r\n\t\t\t//We use use a better random to ensure there are no collisions.\r\n\t\t\tlet result: string = \"\";\r\n\t\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\t\tresult += (Math.random() * 16).toString(16).slice(2, 10);\r\n\t\t\t}\r\n\t\t\treturn Crypto.hexToBinary(result);\r\n\t\t}\r\n\t}\r\n}",
    "/**\r\n * @license\r\n * Copyright Coinversable B.V. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by a AGPLv3-style license that can be\r\n * found in the LICENSE file at https://validana.io/license\r\n */\r\n\r\nimport * as Raven from \"raven-js\";\r\n\r\n// tslint:disable:no-console\r\nexport class Log {\r\n\tprivate static reportErrors: boolean = false;\r\n\tpublic static readonly Debug = 0;\r\n\tpublic static readonly Info = 1;\r\n\tpublic static readonly Warning = 2;\r\n\tpublic static readonly Error = 3;\r\n\tpublic static readonly Fatal = 4;\r\n\tpublic static readonly None = 5;\r\n\tpublic static Level = Log.Error;\r\n\tpublic static options: Raven.RavenOptions = { tags: { clientVersion: \"1.0.0\" }, extra: {} };\r\n\r\n\t/** Set this logger to report errors. Will throw an error if there are problems with the url. */\r\n\tpublic static setReportErrors(dns: string, ignoreLocalhost: boolean): void {\r\n\t\tLog.reportErrors = true;\r\n\t\tRaven.config(dns, { autoBreadcrumbs: false, ignoreUrls: ignoreLocalhost ? [/localhost/] : [] }).install();\r\n\t}\r\n\r\n\t/**  Is this logger registerd to report errors. */\r\n\tpublic static isReportingErrors(): boolean {\r\n\t\treturn Log.reportErrors;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the user that is logged in.\r\n\t * @param addr the address of the user\r\n\t */\r\n\tpublic static setUser(addr: string): void {\r\n\t\tRaven.setUserContext({ id: addr });\r\n\t}\r\n\r\n\t/**\r\n\t * Set the release version of the dashboard.\r\n\t * @param version the version\r\n\t */\r\n\tpublic static setRelease(version: string): void {\r\n\t\tRaven.setRelease(version);\r\n\t}\r\n\r\n\t/**\r\n\t * Detailed information about the program flow that is used for debugging problems.\r\n\t * Will never be logged in a live environment.\r\n\t * @param msg Description of the issue\r\n\t * @param error An optional error that may have arisen\r\n\t */\r\n\tpublic static debug(msg: string, error?: Error): void {\r\n\t\tif (Log.Level <= Log.Debug) {\r\n\t\t\t//Old version of nodejs don't have the console.debug function\r\n\t\t\tif (console.debug !== undefined) {\r\n\t\t\t\tconsole.debug(msg + (error !== undefined ? `: ${error.stack}` : \"\"));\r\n\t\t\t} else {\r\n\t\t\t\tconsole.info(msg + (error !== undefined ? `: ${error.stack}` : \"\"));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Significant things that occur in normal circumstances.\r\n\t * @param msg Description of the issue\r\n\t * @param error An optional error that may have arisen\r\n\t */\r\n\tpublic static info(msg: string, error?: Error): void {\r\n\t\tif (Log.Level <= Log.Info) {\r\n\t\t\tconsole.info(msg + (error !== undefined ? `: ${error.stack}` : \"\"));\r\n\t\t\tif (Log.reportErrors) {\r\n\t\t\t\tif (error !== undefined) {\r\n\t\t\t\t\tRaven.captureBreadcrumb({ level: \"info\", message: msg, data: { stack: error.stack } });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tRaven.captureBreadcrumb({ level: \"info\", message: msg });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Problems which may occur in abnormal circumstances (loss of connection, etc), but are dealt with by the program.\r\n\t * @param msg Description of the issue\r\n\t * @param error An optional error that may have arisen\r\n\t */\r\n\tpublic static warn(msg: string, error?: Error): void {\r\n\t\tif (Log.Level <= Log.Warning) {\r\n\t\t\tconsole.warn(msg + (error !== undefined ? `: ${error.stack}` : \"\"));\r\n\t\t\tif (Log.reportErrors) {\r\n\t\t\t\tif (error !== undefined) {\r\n\t\t\t\t\tRaven.captureBreadcrumb({ level: \"warning\", message: msg, data: { stack: error.stack } });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tRaven.captureBreadcrumb({ level: \"warning\", message: msg });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Errors which require you to modify the program code, because they should never happen.\r\n\t * You will always be notified if this occurs.\r\n\t * @param msg Description of the issue\r\n\t * @param error An optional error that may have arisen\r\n\t */\r\n\tpublic static error(msg: string, error?: Error): void {\r\n\t\tif (Log.Level <= Log.Error) {\r\n\t\t\tconsole.error(msg + (error !== undefined ? `: ${error.stack}` : \"\"));\r\n\t\t\tif (Log.reportErrors) {\r\n\t\t\t\tif (error !== undefined) {\r\n\t\t\t\t\tRaven.captureException(error, { level: \"error\", extra: { message: msg } });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tRaven.captureMessage(msg, { level: \"error\" });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The kind of errors for which you should be waken up at night. Like a live backend going down.\r\n\t * You will always be immediately notified if this occurs.\r\n\t * @param msg Description of the issue\r\n\t * @param error An optional error that may have arisen\r\n\t */\r\n\tpublic static fatal(msg: string, error?: Error): void {\r\n\t\tif (Log.Level <= Log.Fatal) {\r\n\t\t\tconsole.error(msg + (error !== undefined ? `: ${error.stack}` : \"\"));\r\n\t\t\tif (Log.reportErrors) {\r\n\t\t\t\tif (error !== undefined) {\r\n\t\t\t\t\t//Typecast because of buggy raven js types\r\n\t\t\t\t\tRaven.captureException(error, { level: \"fatal\" as \"critical\", extra: { message: msg } });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tRaven.captureMessage(msg, { level: \"fatal\" as \"critical\" });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
  ],
  "names": [
    "tslib_1.__extends",
    "Buffer",
    "tslib_1.__values",
    "btccrypt",
    "Raven.captureMessage",
    "Raven.captureException",
    "Raven.captureBreadcrumb",
    "Raven.setRelease",
    "Raven.setUserContext",
    "Raven.config"
  ],
  "mappings": "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"
}
